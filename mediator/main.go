package main

import (
	"patterns/mediator/pkg"
	"time"
)

/*
Посредник — это поведенческий паттерн проектирования,
который позволяет уменьшить связанность множества объектов между собой,
благодаря перемещению этих связей в один класс-посредник.
Паттерн посредник можно применять:

- Когда вам сложно менять некоторые объекты из-за того, что они имеют множество хаотичных связей с другими объекты.
Посредник позволяет поместить все эти связи в один объекты, после чего вам будет легче их отрефакторить, сделать более понятными и гибкими.
- Когда вы не можете повторно использовать объект, поскольку он зависит от уймы других объектов.
После применения паттерна компоненты теряют прежние связи с другими компонентами, а всё их общение происходит косвенно, через объект-посредник.
- Когда вам приходится создавать множество подобъектов компонентов, чтобы использовать одни и те же компоненты в разных контекстах.
Если раньше изменение отношений в одном компоненте могли повлечь за собой лавину изменений во всех остальных компонентах, то теперь вам достаточно создать подобъект посредника и поменять в нём связи между компонентами.

Преимущества:
- Устраняет зависимости между компонентами, позволяя повторно их использовать.
- Упрощает взаимодействие между компонентами.
- Централизует управление в одном месте.

Недостатки:
- Сильно возрастае количество функций и методов.

Связь между другими паттернами:
Довольно популярна реализация Посредника при помощи Наблюдателя.
При этом объект посредника будет выступать издателем, а все остальные компоненты станут подписчиками и смогут динамически следить за событиями, происходящими в посреднике.
*/

func main() {
	stationManager := pkg.NewStationManager()

	passengerBus := &pkg.Passenger{
		Dispatcher: stationManager,
	}
	cargo := &pkg.Cargo{
		Dispatcher: stationManager,
	}

	passengerBus.Arrive()
	time.Sleep(1 * time.Second)
	cargo.Arrive()
	time.Sleep(1 * time.Second)
	passengerBus.Go()
}
