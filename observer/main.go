package main

import (
	"fmt"
	"patterns/observer/pkg"
)

/*
Наблюдатель - это поведенческий паттерн проектирования, который создаёт механизм подписки, позволяющий одним объектам следить и реагировать на события, происходящие в других объектах.

После того как вы оформили подписку на газету или журнал, вам больше не нужно ездить в супермаркет и проверять, не вышел ли очередной номер. Вместо этого издательство будет присылать новые номера по почте прямо к вам домой сразу после их выхода.

Издательство ведёт список подписчиков и знает, кому какой журнал высылать. Вы можете в любой момент отказаться от подписки, и журнал перестанет вам приходить.

* Когда после изменения состояния одного объекта требуется что-то сделать в других, но вы не знаете наперёд, какие именно объекты должны отреагировать.
* Когда одни объекты должны наблюдать за другими, но только в определённых случаях.

Преимущества:
* Издатели не зависят от конкретных классов подписчиков и наоборот.
* Вы можете подписывать и отписывать получателей на лету.
* Реализует принцип открытости/закрытости.
Недостатки:
* Подписчики оповещаются в случайном порядке.
*/

func main() {
	sub1 := &pkg.Subscriber{Name: "Sub-1"}
	sub2 := &pkg.Subscriber{Name: "Sub-2"}
	sub3 := &pkg.Subscriber{Name: "Sub-3"}
	sub4 := &pkg.Subscriber{Name: "Sub-4"}

	channel := pkg.Publisher{
		Name:      "Publisher channel",
		Consumers: map[string]pkg.Consumer{},
	}

	channel.Subscribe(sub1)
	channel.Subscribe(sub2)
	channel.Subscribe(sub3)
	channel.Subscribe(sub4)

	channel.Notify()

	fmt.Println("Unsubscribe Sub-3")
	channel.Unsubscribe(sub3)

	channel.Notify()
}
